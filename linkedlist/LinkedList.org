#+TITLE: LinkedList
#+STARTUP:showall
** LinkedList 노드 구성
   - 정보를 담는 Data
   - 다음 Node를 가리키는 포인터

** Linked List의 특징
   - 동적인 자료구조
   - 필요할때 할당, 필요없으면 해제
   - 동적인 메모리사용으로 미리 크기를 지정할 필요없음
   - 불연속메모리 사용
   - 물리적 순서없고 불연속적으로 저장됨
   - 링크에 의해 순서가 유지됨
   - 순차적 접근만 가능 ,임의접근은 불가능
   - 자료갯수에 무관하게 최적의 저장방법 제공


** 단방향 LinkedList
   - 특징
     1. 한개의 방향으로만 데이터 검색이 가능
     2. 단방향으로만 삭제 및 추가 가능
     
   - 작업
     1. 초기화 : Head 및 Tail 초기화 , 노드 카운트 초기화 
     2. 노드 추가 : 첫 노드의 경우 head 에 노트를 생성해주고 head 와 tail 을 동일하게 지정 해준다. 이후 추가 부터는 추가한 노드가 tail 로 지정해 준다. 
     3. 노드 삭제 : Head 를 임시 포인터에 저장하고 head 를 다음 노드로 변경한다, 임시 저장된 노드의 메모리를 제거한다.
     4. Destruction : 소유하고 있는 모든 노드의 메모리를 헤드부터 순차적으로 해제 해준다.
   - Iteration & Retrieval
     1. 

** 양방향 LinkedList
   - 특징
     1. 양방향으로 데이터 검색이 가능함
     2. 직전 노드를 알고 있기 때문에 선택한 인덱스의 노드를 삭제가능

   - 작업
     1. 초기화 : Head 및 Tail 초기화 및 노드 카운트 초기화
     2. 노드 추가 : 신규 노드를 생성하여 Next , Prev 에 노트를 추가하고 다음 노드가 존재 하는경우 다음노드는 Next 로 지정하며 직전 노드는 Prev 에 지정
     3. 노드 삭제 : 지정된 노드의 직전 노드.현대 노드, 다음 노드를 삭제 가능하며 삭제 시에도 다음 노드 또는 직전 노드가 있는경우 대체 해야 한다.
     4. Destruction : 단방향 링크드리스트와 동일한 기능

   - Iteration & Retrieval

#+BEGIN_SRC
currentNode := List.getHead;

while (currentNode) do
begin
    Writeln(currentNode.Data)
    current := currentNode.Next;
end;

#+END_SRC
	


** 
    

